# ESPHome Bluetooth Proxy Configuration for RadiaCode Devices
# Optimized for radiation monitoring with extended range and reliability

substitutions:
  device_name: radiacode-proxy
  friendly_name: "RadiaCode Bluetooth Proxy"
  
esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  comment: "Bluetooth proxy optimized for RadiaCode radiation detectors"

esp32:
  board: esp32dev  # Change to your specific board
  framework:
    type: esp-idf  # Required for reliable Bluetooth proxy operation

# Network Configuration
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  # Enable fallback hotspot
  ap:
    ssid: "${device_name}-fallback"
    password: !secret ap_password

# Required components for Home Assistant integration
logger:
  level: INFO  # Change to DEBUG for troubleshooting
  
api:
  encryption:
    key: !secret api_encryption_key

ota:
  platform: esphome
  password: !secret ota_password

# Captive portal for easy WiFi setup
captive_portal:

# Time sync for accurate timestamps
time:
  - platform: homeassistant
    id: ha_time

# Bluetooth Low Energy Tracker configuration
# Optimized for RadiaCode device detection and communication
esp32_ble_tracker:
  scan_parameters:
    # Extended scan window for better RadiaCode detection
    interval: 320ms    # Scan interval
    window: 300ms      # Scan window - nearly continuous scanning
    active: true       # Active scanning for better device discovery
  
  # Optional: Filter for RadiaCode devices only
  on_ble_advertise:
    - then:
        - if:
            condition:
              # Look for RadiaCode-specific advertising data
              lambda: 'return x.get_name().find("Radon") != std::string::npos || x.get_name().find("RadiaCode") != std::string::npos;'
            then:
              - logger.log:
                  format: "Found RadiaCode device: %s [%s] RSSI: %d dB"
                  args: [ 'x.get_name().c_str()', 'x.address_str().c_str()', 'x.get_rssi()' ]

# Bluetooth Proxy configuration
bluetooth_proxy:
  active: true
  # Enable caching for faster reconnections
  cache_services: true
  # Allocate sufficient connection slots for RadiaCode devices
  connection_slots: 3

# Optional: Status LED indicator
status_led:
  pin:
    number: GPIO2  # Built-in LED on many ESP32 boards
    inverted: true

# Diagnostic sensors for monitoring proxy performance
sensor:
  # WiFi signal strength
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    update_interval: 60s
    entity_category: diagnostic
    
  # Device uptime
  - platform: uptime
    name: "${friendly_name} Uptime"
    entity_category: diagnostic
    
  # Free heap memory
  - platform: template
    name: "${friendly_name} Free Memory"
    lambda: |-
      return heap_caps_get_free_size(MALLOC_CAP_INTERNAL);
    unit_of_measurement: bytes
    entity_category: diagnostic
    update_interval: 60s

# Text sensors for device information
text_sensor:
  # ESP32 information
  - platform: version
    name: "${friendly_name} ESPHome Version"
    entity_category: diagnostic
    
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
      entity_category: diagnostic
    ssid:
      name: "${friendly_name} WiFi SSID"
      entity_category: diagnostic
    mac_address:
      name: "${friendly_name} MAC Address"
      entity_category: diagnostic

# Binary sensors for status monitoring
binary_sensor:
  # WiFi connection status
  - platform: status
    name: "${friendly_name} Online"
    entity_category: diagnostic

# Switches for proxy control
switch:
  # Restart button
  - platform: restart
    name: "${friendly_name} Restart"
    entity_category: config

# Button for safe mode (for troubleshooting)
button:
  - platform: safe_mode
    name: "${friendly_name} Safe Mode"
    entity_category: config

# Optional: Physical button for manual restart (if available)
# Uncomment and adjust pin as needed
# binary_sensor:
#   - platform: gpio
#     pin:
#       number: GPIO0
#       mode: INPUT_PULLUP
#       inverted: true
#     name: "${friendly_name} Boot Button"
#     on_press:
#       - switch.turn_on: restart_switch

# Advanced configuration for specific RadiaCode models
# Uncomment if you know your device's specific BLE characteristics

# ble_client:
#   - mac_address: "XX:XX:XX:XX:XX:XX"  # Your RadiaCode MAC address
#     id: radiacode_device
#     auto_connect: true
#     on_connect:
#       then:
#         - logger.log: "Connected to RadiaCode device"
#     on_disconnect:
#       then:
#         - logger.log: "Disconnected from RadiaCode device"

# Custom services for RadiaCode-specific operations
# These would be implemented based on the RadiaCode BLE protocol
# Currently, the integration handles this through the Home Assistant side

# Optional: Add temperature sensor for monitoring proxy environment
# This can help with troubleshooting temperature-related issues
# sensor:
#   - platform: dht
#     pin: GPIO4
#     model: DHT22
#     temperature:
#       name: "${friendly_name} Temperature"
#     humidity:
#       name: "${friendly_name} Humidity"
#     update_interval: 300s